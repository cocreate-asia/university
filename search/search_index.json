{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to COCREATE UNIVERSITY Resources Git","title":"Home"},{"location":"#welcome-to-cocreate-university","text":"","title":"Welcome to COCREATE UNIVERSITY"},{"location":"#resources","text":"","title":"Resources"},{"location":"#git","text":"","title":"Git"},{"location":"git/","text":"Git Resources Definition of git Git is a distributed version-control system for tracking changes in source code during software development. It is designed for coordinating work among programmers, but it can be used to track changes in any set of files. Its goals include speed, data integrity, and support for distributed, non-linear workflows. 1 Resources Commit Messages Pull Requests Branching Strategy Web Hooks External Links GitHub Wikipedia \u21a9","title":"Git"},{"location":"git/#git-resources","text":"Definition of git Git is a distributed version-control system for tracking changes in source code during software development. It is designed for coordinating work among programmers, but it can be used to track changes in any set of files. Its goals include speed, data integrity, and support for distributed, non-linear workflows. 1","title":"Git Resources"},{"location":"git/#resources","text":"Commit Messages Pull Requests Branching Strategy Web Hooks","title":"Resources"},{"location":"git/#external-links","text":"GitHub Wikipedia \u21a9","title":"External Links"},{"location":"git/branching/","text":"GIT Branching Branching Strategy Master Release - 1 (tag - 1) hot fix - 1 develop Sprint - 1 feature - 1 bug - 1 Sprint - 2 feature - 1 bug - 1 Release - 2 (tag - 2) Tag Strategy Master Release - 1 (version - 1) Release - 2 (version - 2) Version Strategy V<Major>.<Minor>.<Patch/Upgrade> Here V stands for Version Major : Major version is a definite release of the product. It increased when there are significant changes in functionality. Minor : Minor version is incremented when only new features or major bug fixes have been added. Upgrade/Patch : Upgrade refers to the replacement of a product with a newer version of product.It is incremented only when upgrade is provided on designated major release.Patch version starts with 0 and incremented only when bug has been resolved. Example V1.0.0","title":"GIT Branching"},{"location":"git/branching/#git-branching","text":"","title":"GIT Branching"},{"location":"git/branching/#branching-strategy","text":"Master Release - 1 (tag - 1) hot fix - 1 develop Sprint - 1 feature - 1 bug - 1 Sprint - 2 feature - 1 bug - 1 Release - 2 (tag - 2)","title":"Branching Strategy"},{"location":"git/branching/#tag-strategy","text":"Master Release - 1 (version - 1) Release - 2 (version - 2)","title":"Tag Strategy"},{"location":"git/branching/#version-strategy","text":"V<Major>.<Minor>.<Patch/Upgrade> Here V stands for Version Major : Major version is a definite release of the product. It increased when there are significant changes in functionality. Minor : Minor version is incremented when only new features or major bug fixes have been added. Upgrade/Patch : Upgrade refers to the replacement of a product with a newer version of product.It is incremented only when upgrade is provided on designated major release.Patch version starts with 0 and incremented only when bug has been resolved. Example V1.0.0","title":"Version Strategy"},{"location":"git/commit/","text":"How to write good commit messages The seven rules of a great Git commit message Separate subject from body with a blank line Limit the subject line to 50 characters Capitalize the subject line Do not end the subject line with a period Use the imperative mood in the subject line Wrap the body at 72 characters 1 Use the body to explain what and why vs. how Your subject should start with one of the following feat: The new feature you're adding to a particular application fix: A bug fix style: Feature and updates related to styling refactor: Refactoring a specific section of the codebase test: Everything related to testing docs: Everything related to documentation chore: Regular code maintenance.[ You can also use emojis to represent commit types] Template Capitalized , short ( 50 chars or less ) summary More detailed explanatory text , if necessary . Wrap it to about 72 characters or so . In some contexts , the first line is treated as the subject of an email and the rest of the text as the body . The blank line separating the summary from the body is critical ( unless you omit the body entirely ); tools like rebase can get confused if you run the two together . Write your commit message in the imperative : \"Fix bug\" and not \"Fixed bug\" or \"Fixes bug.\" This convention matches up with commit messages generated by commands like git merge and git revert . Further paragraphs come after blank lines . - Bullet points are okay , too - Typically a hyphen or asterisk is used for the bullet , followed by a single space , with blank lines in between , but conventions vary here - Use a hanging indent If you use an issue tracker , add a reference ( s ) to them at the bottom , like so : Resolves : # 123 Example Re - enable React server - side rendering Move render string output directly into template creation portion of the template render call . By moving the render string out of Koa state , we no longer have memory allocation issues : Results : https : // cl . ly / abcdef123456 Resolves : # 123 Use git commit instead of git commit -m as the first command opens a editor in cmd and the later expects to be entered the message in the same line. Each line in description should be limited to 72 charectars \u21a9","title":"Commit"},{"location":"git/commit/#how-to-write-good-commit-messages","text":"","title":"How to write good commit messages"},{"location":"git/commit/#the-seven-rules-of-a-great-git-commit-message","text":"Separate subject from body with a blank line Limit the subject line to 50 characters Capitalize the subject line Do not end the subject line with a period Use the imperative mood in the subject line Wrap the body at 72 characters 1 Use the body to explain what and why vs. how Your subject should start with one of the following feat: The new feature you're adding to a particular application fix: A bug fix style: Feature and updates related to styling refactor: Refactoring a specific section of the codebase test: Everything related to testing docs: Everything related to documentation chore: Regular code maintenance.[ You can also use emojis to represent commit types]","title":"The seven rules of a great Git commit message"},{"location":"git/commit/#template","text":"Capitalized , short ( 50 chars or less ) summary More detailed explanatory text , if necessary . Wrap it to about 72 characters or so . In some contexts , the first line is treated as the subject of an email and the rest of the text as the body . The blank line separating the summary from the body is critical ( unless you omit the body entirely ); tools like rebase can get confused if you run the two together . Write your commit message in the imperative : \"Fix bug\" and not \"Fixed bug\" or \"Fixes bug.\" This convention matches up with commit messages generated by commands like git merge and git revert . Further paragraphs come after blank lines . - Bullet points are okay , too - Typically a hyphen or asterisk is used for the bullet , followed by a single space , with blank lines in between , but conventions vary here - Use a hanging indent If you use an issue tracker , add a reference ( s ) to them at the bottom , like so : Resolves : # 123","title":"Template"},{"location":"git/commit/#example","text":"Re - enable React server - side rendering Move render string output directly into template creation portion of the template render call . By moving the render string out of Koa state , we no longer have memory allocation issues : Results : https : // cl . ly / abcdef123456 Resolves : # 123 Use git commit instead of git commit -m as the first command opens a editor in cmd and the later expects to be entered the message in the same line. Each line in description should be limited to 72 charectars \u21a9","title":"Example"},{"location":"git/pull-requests/","text":"How to create a better pull request Title should describe the purpose of the pull request. Can be your commit summary Title should have one of the following prefix feat , fix , style , refactor , test , docs , chore Example: feat: Proivdes functionality abc on merge . Write summary as paragraphs or bullet points also works. For code which generates visual output on compile, attach screenshots of the output. For code which generates api calls, attach link / screenshot of request and response of the data. If test cases are being written, attach test cases success screenshot as well. Request a peer and a team lead to preview and accept the changes. If any changes are requested by team lead in pull request, review them and fix the issues. Important Create a pull request after squashing all the commits in the branch. Squash message should follow all the rules that apply to commit messages.","title":"How to create a better pull request"},{"location":"git/pull-requests/#how-to-create-a-better-pull-request","text":"Title should describe the purpose of the pull request. Can be your commit summary Title should have one of the following prefix feat , fix , style , refactor , test , docs , chore Example: feat: Proivdes functionality abc on merge . Write summary as paragraphs or bullet points also works. For code which generates visual output on compile, attach screenshots of the output. For code which generates api calls, attach link / screenshot of request and response of the data. If test cases are being written, attach test cases success screenshot as well. Request a peer and a team lead to preview and accept the changes. If any changes are requested by team lead in pull request, review them and fix the issues. Important Create a pull request after squashing all the commits in the branch. Squash message should follow all the rules that apply to commit messages.","title":"How to create a better pull request"},{"location":"git/web-hooks/","text":"Pre Commit Webhooks We will be using gitmoji-cli webhook for commiting. This would take care of all the rules we have read in How to write good commit messages . Steps to use Webhooks Installation npm i -g gitmoji-cli : This command will install gitmoji-cli globally on your machine Usage gitmoji --help : This command will show all the available commands Commit This can we done in two ways Client git add . gitmoji -c : This command will start the interactive commit client and auto generates your commit Hook gitmoji -i : This command will intialize the commit as a commit hook git add . git commit","title":"Pre Commit Webhooks"},{"location":"git/web-hooks/#pre-commit-webhooks","text":"We will be using gitmoji-cli webhook for commiting. This would take care of all the rules we have read in How to write good commit messages .","title":"Pre Commit Webhooks"},{"location":"git/web-hooks/#steps-to-use-webhooks","text":"","title":"Steps to use Webhooks"},{"location":"git/web-hooks/#installation","text":"npm i -g gitmoji-cli : This command will install gitmoji-cli globally on your machine","title":"Installation"},{"location":"git/web-hooks/#usage","text":"gitmoji --help : This command will show all the available commands","title":"Usage"},{"location":"git/web-hooks/#commit","text":"This can we done in two ways","title":"Commit"},{"location":"git/web-hooks/#client","text":"git add . gitmoji -c : This command will start the interactive commit client and auto generates your commit","title":"Client"},{"location":"git/web-hooks/#hook","text":"gitmoji -i : This command will intialize the commit as a commit hook git add . git commit","title":"Hook"}]}